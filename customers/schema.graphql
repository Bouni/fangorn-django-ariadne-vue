extend type Query {
    allCountries: [Country]!
    allSalutations: [Salutation]!
    allCustomers: [Customer]!
    customer(customerId: ID!): CustomerResult!
}

extend type Mutation {
    createCustomer(input: CustomerInput!): CustomerResult!
    deleteCustomer(customerId: ID!): DeleteResult!
    editCustomer(customerId: ID!, input: CustomerInput!): CustomerResult!
}

input SalutationInput {
    name: String!
}

type Salutation {
    name: String!
}

input CountryInput {
    name: String
    code: String
}

type Country {
    name: String
    code: String
    alpha3: String
    numeric: Int
    ioc_code: String
}

input CustomerInput {
    id: ID!
    customer_number: Int
    salutation: SalutationInput 
    name: String!
    firstname: String
    address: String
    city: String
    zipcode: String
    country: CountryInput 
    phone: String
    mobile: String
    email: String
    notes: String
    created: String 
    modified: String 
}

type Customer {
    id: ID!
    customer_number: Int!
    salutation: Salutation
    name: String!
    firstname: String
    address: String
    city: String
    zipcode: String
    country: Country
    phone: String
    mobile: String
    email: String
    notes: String
    created: String 
    modified: String 
}

type CustomerResult {
    success: Boolean!
    errors: [String]
    customer: Customer
}

type CustomersResult {
    success: Boolean!
    errors: [String]
    customers: [Customer]
}

type DeleteResult {
    success: Boolean!
    errors: [String]
}



